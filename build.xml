<?xml version="1.0" encoding="iso-8859-1"?>
<project name="imageTiles" default="CreateRelease">

   <description>
      A desktop application for testing image convolution operations.
   </description>

   <property file="ant.properties"/>

   <!-- Inputs -->
   <!-- Directories -->
   <property name="scriptDir" value="bin"/>
   <property name="sourceDir" value="src"/>
   <property name="etcDir" value="etc"/>
   <property name="libDir" value="lib"/>

   <property name="source.core" value="${sourceDir}/core"/>
   <property name="source.swing" value="${sourceDir}/swing"/>
   <property name="source.demo" value="${sourceDir}/demo"/>

   <!-- Files -->
   <property name="manifest.core" value="${etcDir}/Manifest-core.mf"/>
   <property name="manifest.swing" value="${etcDir}/Manifest-swing.mf"/>
   <property name="manifest.simpleDemo" value="${etcDir}/Manifest-simpleDemo.mf"/>
   <property name="manifest.inApplicationDemo" value="${etcDir}/Manifest-inApplicationDemo.mf"/>

   <property name="readmeFileName" value="README.txt"/>
   <property name="licenseFileName" value="LICENSE.txt"/>
   <property name="versionFileName" value="VERSION.txt"/>

   <!-- Keystore -->
   <property name="keystoreAlias" value="grlea"/>
   <property name="keystorePassword" value="inttOO8"/>

   <!-- Source path: The files that go into the src/ zip -->
   <fileset id="sources" dir=".">
      <include name="ant.properties"/>
      <include name="build.xml"/>
      <include name="bin/**"/>
      <include name="etc/**"/>
      <include name="${source.core}/**"/>
      <include name="${source.swing}/**"/>
      <include name="${source.demo}/**"/>
   </fileset>

   <!-- Outputs -->
   <!-- Directories-->
   <property name="releasesDir" value="release"/>
   <property name="releaseDir" value="${releasesDir}/${product.version}"/>
   <property name="buildDir" value="${releaseDir}/build"/>
   <property name="wwwDir" value="www"/>
   <property name="wwwReleaseDir" value="${wwwDir}/release"/>

   <property name="tempDir" value="${releaseDir}/temp"/>
   <property name="classes" value="${tempDir}/classes"/>
   <property name="classes.core" value="${classes}/core"/>
   <property name="classes.swing" value="${classes}/swing"/>
   <property name="classes.simpleDemo" value="${classes}/simpleDemo"/>
   <property name="classes.inApplicationDemo" value="${classes}/inApplicationDemo"/>
   <property name="docDir" value="${buildDir}/doc"/>
   <property name="javadocDir" value="${docDir}/api"/>

   <!-- Classpath -->
   <path id="classpath.core">
<!--      <fileset dir="." >-->
<!--      </fileset>-->
   </path>

   <path id="classpath.swing">
      <dirset dir=".">
         <include name="${classes.core}"/>
      </dirset>
<!--      <fileset dir="." >-->
<!--      </fileset>-->
      <path refid="classpath.core"/>
   </path>

   <path id="classpath.simpleDemo">
      <path refid="classpath.core"/>
      <path refid="classpath.swing"/>
      <dirset dir="." >
         <include name="${classes.core}"/>
         <include name="${classes.swing}"/>
      </dirset>
<!--      <fileset dir="." >-->
<!--      </fileset>-->
   </path>

   <path id="classpath.inApplicationDemo">
      <path refid="classpath.core"/>
      <path refid="classpath.swing"/>
      <dirset dir="." >
         <include name="${classes.core}"/>
         <include name="${classes.swing}"/>
      </dirset>
      <fileset dir="." >
         <include name="${libDir}/${lib.explicitLayout.name}"/>
         <include name="${libDir}/${lib.explicitTableLayout.name}"/>
         <include name="${libDir}/${lib.jgoodiesLooksPlastic.name}"/>
      </fileset>
   </path>

   <path id="classpath.all">
      <path refid="classpath.core"/>
      <path refid="classpath.swing"/>
      <path refid="classpath.simpleDemo"/>
      <path refid="classpath.inApplicationDemo"/>
   </path>

   <!-- Jars -->
   <property name="jar.core" value="${buildDir}/${ant.project.name}-core.jar"/>
   <property name="jar.swing" value="${buildDir}/${ant.project.name}-swing.jar"/>
   <property name="jar.simpleDemo" value="${buildDir}/${ant.project.name}-simpleDemo.jar"/>
   <property name="jar.inApplicationDemo" value="${buildDir}/${ant.project.name}-inApplicationDemo.jar"/>

   <!-- Zips -->
   <property name="sourceZip" value="${buildDir}/${ant.project.name}-src.zip"/>
   <property name="docZip" value="${buildDir}/${ant.project.name}-doc.zip"/>
   <property name="releaseZipName" value="${ant.project.name}-${product.version}.zip"/>
   <property name="releaseZip" value="${releaseDir}/${releaseZipName}"/>

   <!-- Targets -->

   <target name="CreateRelease" depends="Clean, BuildRelease">
      <delete dir="${docDir}" includeemptydirs="true" />
      <zip zipfile="${releaseZip}" >
         <zipfileset dir="${buildDir}" includes="**/*" excludes="${releaseZipName}"
                     prefix="${ant.project.name}-${product.version}"/>
      </zip>
   </target>

   <target name="CreateReleaseAndBuildWww" depends="Clean, BuildRelease, CopyWwwArtefacts, CreateRelease">
      <copy file="${releaseZip}" todir="${wwwReleaseDir}"/>
   </target>

   <target name="CopyWwwArtefacts" depends="BuildRelease">

      <delete>
         <fileset dir="${wwwReleaseDir}" includes="**"/> 
      </delete>
      <copy todir="${wwwReleaseDir}">
         <fileset dir="${buildDir}">
            <include name="LICENSE.txt"/>
            <include name="README.txt"/>
            <include name="imageTiles-core.jar"/>
            <include name="imageTiles-swing.jar"/>
            <include name="imageTiles-simpleDemo.jar"/>
            <include name="imageTiles-inApplicationDemo.jar"/>
            <include name="imageTiles-doc.zip"/>
            <include name="imageTiles-src.zip"/>
         </fileset>
      </copy>

   </target>

   <target name="BuildRelease"
           depends="Clean, BuildCodeJars, BuildSourceZip, CopyDocuments, CopyScripts, CopyLibs, BuildDocZip, Cleanup"/>

   <target name="Init">
      <tstamp/>
      <mkdir dir="${tempDir}"/>
      <mkdir dir="${classes}"/>
      <mkdir dir="${classes.core}"/>
      <mkdir dir="${classes.swing}"/>
      <mkdir dir="${classes.simpleDemo}"/>
      <mkdir dir="${classes.inApplicationDemo}"/>

      <mkdir dir="${releaseDir}"/>
      <mkdir dir="${buildDir}"/>
      <mkdir dir="${javadocDir}"/>

      <mkdir dir="${libDir}"/>
      <copy file="${lib.explicitLayout.dir}/${lib.explicitLayout.name}" todir="${libDir}"/>
      <copy file="${lib.explicitTableLayout.dir}/${lib.explicitTableLayout.name}" todir="${libDir}"/>
      <copy file="${lib.jgoodiesLooksPlastic.dir}/${lib.jgoodiesLooksPlastic.name}" todir="${libDir}"/>
   </target>

   <target name="Clean">
      <delete dir="${classes}"/>
      <delete dir="${releaseDir}"/>
   </target>

   <target name="BuildCodeJars"
           depends="BuildCodeJar-core, BuildCodeJar-inApplicationDemo, BuildCodeJar-simpleDemo, BuildCodeJar-swing">
   </target>

   <target name="BuildCodeJar-core" depends="CompileJavas-core, CopyResources-core">
      <jar jarfile="${jar.core}"
           basedir="${classes.core}"
           manifest="${manifest.core}"
           includes="**"/>
<!--      <signjar jar="${jar.core}" alias="${keystoreAlias}" storepass="${keystorePassword}"/>-->
   </target>

   <target name="BuildCodeJar-swing"
           depends="BuildCodeJar-core, CompileJavas-swing, CopyResources-swing">
      <jar jarfile="${jar.swing}"
           basedir="${classes.swing}"
           manifest="${manifest.swing}"
           includes="**"/>
   </target>

   <target name="BuildCodeJar-simpleDemo"
           depends="BuildCodeJar-core, BuildCodeJar-swing, CompileJavas-simpleDemo, CopyResources-simpleDemo">
      <jar jarfile="${jar.simpleDemo}"
           basedir="${classes.simpleDemo}"
           manifest="${manifest.simpleDemo}"
           includes="**"/>
   </target>

   <target name="BuildCodeJar-inApplicationDemo"
           depends="BuildCodeJar-core, BuildCodeJar-swing, CompileJavas-inApplicationDemo, CopyResources-inApplicationDemo">
      <jar jarfile="${jar.inApplicationDemo}"
           basedir="${classes.inApplicationDemo}"
           manifest="${manifest.inApplicationDemo}"
         includes="**"/>
   </target>



   <target name="CompileJavas"
           depends="Init, CompileJavas-core, CompileJavas-swing, CompileJavas-simpleDemo, CompileJavas-inApplicationDemo">
   </target>

   <target name="CompileJavas-core" depends="Init" >
      <javac srcdir="${source.core}"
             classpathref="classpath.core"
             destdir="${classes.core}"
             includes="org/**/*.java"/>
   </target>

   <target name="CompileJavas-swing" depends="Init, CompileJavas-core" >
      <javac srcdir="${source.swing}"
             classpathref="classpath.swing"
             destdir="${classes.swing}"
             includes="org/**/*.java"/>
   </target>

   <target name="CompileJavas-simpleDemo" depends="Init, CompileJavas-swing" >
      <javac srcdir="${source.demo}"
             classpathref="classpath.simpleDemo"
             destdir="${classes.simpleDemo}"
         includes="org/grlea/imageTiles/demo/Simple*.java"/>
   </target>

   <target name="CompileJavas-inApplicationDemo" depends="Init, CompileJavas-swing" >
      <javac srcdir="${source.demo}"
             classpathref="classpath.inApplicationDemo"
             destdir="${classes.inApplicationDemo}"
             includes="org/grlea/imageTiles/demo/InsideApplicationDemo.java"/>
   </target>

   <target name="CopyResources-core" depends="CopyDocuments" >
      <copy todir="${classes.core}/meta-inf" >
         <fileset dir="${buildDir}" includes="${licenseFileName},${readmeFileName},${versionFileName}"/>
      </copy>
   </target>

   <target name="CopyResources-swing" depends="CopyDocuments" >
      <copy todir="${classes.swing}" >
         <fileset dir="${buildDir}" includes="${licenseFileName},${readmeFileName},${versionFileName}"/>
      </copy>
   </target>

   <target name="CopyResources-simpleDemo" depends="CopyDocuments" >
      <copy todir="${classes.simpleDemo}" >
         <fileset dir="${buildDir}" includes="${licenseFileName},${readmeFileName},${versionFileName}"/>
      </copy>

      <copy todir="${classes.simpleDemo}">
         <fileset dir="${source.demo}">
            <include name="images/George.jpg"/>
         </fileset>
      </copy>
   </target>

   <target name="CopyResources-inApplicationDemo" depends="CopyDocuments" >
      <copy todir="${classes.inApplicationDemo}" >
         <fileset dir="${buildDir}" includes="${licenseFileName},${readmeFileName},${versionFileName}"/>
      </copy>

      <copy todir="${classes.inApplicationDemo}">
         <fileset dir="${source.demo}">
            <include name="images/Installer Header.jpg"/>
            <include name="images/*.gif"/>
         </fileset>
      </copy>
   </target>

   <target name="BuildSourceZip" depends="Init">
      <zip zipfile="${sourceZip}">
         <fileset refid="sources"/>
      </zip>
   </target>

   <target name="CopyDocuments">
      <copy todir="${buildDir}">
         <fileset dir="${etcDir}" includes="${licenseFileName},${readmeFileName},${versionFileName}"/>
         <filterset>
            <filter token="VERSION" value="${product.version}" />
          </filterset>
      </copy>
   </target>

   <target name="CopyScripts">
      <copy todir="${buildDir}">
         <fileset dir="${scriptDir}" includes="*"/>
      </copy>
   </target>

   <target name="CopyLibs">
      <copy todir="${buildDir}">
         <fileset dir="${basedir}" includes="lib/**"/>
      </copy>
<!--      <signjar alias="${keystoreAlias}" storepass="${keystorePassword}">-->
<!--         <fileset dir="${buildDir}/lib" includes="**.jar" />-->
<!--      </signjar>-->
   </target>

   <target name="BuildDocZip" depends="CompileJavadoc">
      <zip zipfile="${docZip}">
         <fileset dir="${docDir}" includes="**"/>
      </zip>
   </target>

   <target name="CompileJavadoc" depends="Init">
      <javadoc destdir="${javadocDir}"
               classpathref="classpath.all"
               packagenames="org.grlea.**.*"
               access="protected" Author="true" Use="true" Version="true"
               Windowtitle="${product.name} ${product.version}"
               nodeprecatedlist="true" notree="true" nohelp="true" failonerror="true"
               additionalparam="-linksource" >

         <link offline="true"
               href="${jdk.javadoc.remote}"
               packagelistloc="${jdk.javadoc.local}" />

         <sourcepath>
            <dirset dir=".">
               <include name="${source.core}"/>
               <include name="${source.swing}"/>
               <include name="${source.demo}"/>
            </dirset>
         </sourcepath>

         <group title="Core Classes">
            <package name="org.grlea.imageTiles"/>
            <package name="org.grlea.imageTiles.background"/>
            <package name="org.grlea.imageTiles.choose"/>
            <package name="org.grlea.imageTiles.imageSource"/>
            <package name="org.grlea.imageTiles.pipeline"/>
            <package name="org.grlea.imageTiles.place"/>
            <package name="org.grlea.imageTiles.render"/>
            <package name="org.grlea.imageTiles.tileHolder"/>
            <package name="org.grlea.imageTiles.transition"/>
         </group>

         <group title="AWT &amp; Swing Components">
            <package name="org.grlea.imageTiles.swing"/>
            <package name="org.grlea.imageTiles.swing.configure"/>
         </group>

         <group title="Demonstration Applications">
            <package name="org.grlea.imageTiles.demo"/>
         </group>

         <header>
            Image Tiles ${product.version} &lt;br /&gt;
            &lt;a href="http://image-tiles.dev.java.net/" target="_blank"&gt;http://image-tiles.dev.java.net/ &lt;/a&gt;&lt;br /&gt;&lt;br /&gt;
         </header>

         <bottom>
            Copyright (c) 2004 Graham Lea. &lt;br /&gt;
            All rights reserved.
         </bottom>
      </javadoc>
   </target>

   <target name="Cleanup">
      <delete dir="${classes}" failonerror="false"/>
      <delete dir="${tempDir}" failonerror="false"/>
   </target>

</project>
